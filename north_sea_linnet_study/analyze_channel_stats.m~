% Script that plots the channel statistics

%% Read and store the data

% Specify the CSV files to be used for the plots
csv_files = {'data/ch_data-jan-1hop.csv',...
             'data/ch_data-jul-1hop.csv',...
             'data/ch_data-jan-2hop.csv',...
             'data/ch_data-jul-2hop.csv',...
             'data/ch_data-jan-3hop.csv',...
             'data/ch_data-jul-3hop.csv'};

% Initialize the data arrays
num_samples = 2500;
ch_gains = NaN(num_samples, numel(csv_files));
ch_delays = NaN(num_samples, numel(csv_files));
delay_spreads = NaN(num_samples, numel(csv_files));

% Loop through every CSV file and extract the data
for n = 1:numel(csv_files)
    csv_data = csvread(csv_files{n}, 1, 2);
    ch_gains(:, n) = csv_data(:, 1);
    ch_delays(:, n) = csv_data(:, 2);
    delay_spreads(:, n) = csv_data(:, 3);
end

%% Produce the plots

% Set the line styles and legends
line_styles = {'k-', 'k--', 'b-', 'b--', 'r-', 'r--'};
legends = {'1 km (Jan)', '1 km (Jul)', ...
           '2 km (Jan)', '2 km (Jul)', ...
           '3 km (Jan)', '3 km (Jul)'};

% Plot CDFs of the channel gain in dB
figure; hold on;
for n = 1:numel(csv_files)
    h = cdfplot(ch_gains(:, n));
    set(h, 'linewidth', 1.5, 'color', line_styles{n}(1), 'linestyle', line_styles{n}(2:end));
    xlabel('Channel gain, dB'), ylabel('CDF');
    title('')
    box on; grid off;
    legend(legends); legend('boxon');
end

% % Plot CDFs of the channel delay
% figure; hold on;
% for n = 1:numel(csv_files)
%     h = cdfplot(ch_delays(:, n));
%     set(h, 'linewidth', 1.5, 'color', line_styles{n}(1), 'linestyle', line_styles{n}(2:end));
%     xlabel('Propagation delay, sec'), ylabel('CDF');
%     title('')
% end

% Plot CDFs of the channel delay spread
figure; hold on;
for n = 1:numel(csv_files)
    h = cdfplot(delay_spreads(:, n));
    set(h, 'linewidth', 1.5, 'color', line_styles{n}(1), 'linestyle', line_styles{n}(2:end));
    xlabel('Channel delay spread, sec'), ylabel('CDF');
    title('')
    box on; grid off;
    legend(legends); legend('boxon');
end

